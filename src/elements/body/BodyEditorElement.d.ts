import { LitElement, TemplateResult, CSSResult } from 'lit-element';
import { RequestBody, ApiTypes } from '@advanced-rest-client/events';
import { ResizableMixin } from '@anypoint-web-components/awc';
import {
  bodyTypeSelectorTemplate,
  bodyTypeOptionsTemplate,
  selectedValue,
  valueValue,
  modelValue,
  editorTemplate,
  rawEditorTemplate,
  urlEncodeEditorTemplate,
  multipartEditorTemplate,
  fileEditorTemplate,
  noEditorTemplate,
  typeChangeHandler,
  pickFileHandler,
  fileChangeHandler,
  notifyInput,
  fileDetailTemplate,
  clearValueHandler,
  readMetaModel,
  setMetaModel,
  urlEncodeChangeHandler,
  multipartChangeHandler,
  modelChanged,
  restoreFileModel,
  editorActions,
  togglePreviewHandler,
  previewDialogOpened,
  generatingPreview,
  previewValue,
  generatePreview,
  previewTemplate,
  previewClosedHandler,
  rawChangeHandler,
  contentTypeValue,
  analyzeContentType,
  invalidMimeValue,
  invalidMimeMessage,
  invalidMimeTemplate,
  fixableInvalidMimeTemplate,
  autoFixMime,
  monacoTemplate,
  mimeValue,
  mainActionsTemplate,
  mimeTypeChangeHandler,
  dropHandler,
  dragOverHandler,
  enabledEditorsValue,
  effectiveEditorsValue,
  computeEffectiveEditors,
} from './internals.js';
import { EditorType } from '../../types';

export const editorTypes: Readonly<EditorType[]>;
export declare type allowedEditors = 'raw' | 'urlEncode' | 'multipart' | 'file';

/**
 * @fires change When the value and the model change
 */
export default class BodyEditorElement extends ResizableMixin(LitElement) {
  static readonly styles: CSSResult[];

  /**
   * A HTTP body.
   *
   * Depending of current editor selection the type can vary.
   * @attribute
   */
  value: string | FormData | File | Blob;
  [valueValue]: string | FormData | File | Blob;
  /**
   * Previously generated by this editor metadata model.
   * Used internally to set the UI.
   */
  model: RequestBody.BodyMetaModel[];
  [modelValue]: RequestBody.BodyMetaModel[];
  /**
   * The currently rendered editor.
   * @attribute
   */
  selected: allowedEditors;
  [selectedValue]: allowedEditors;
  /**
   * Enables Anypoint theme
   * @attribute
   */
  anypoint: boolean;
  /**
   * Enables Material Design outlined style
   * @attribute
   */
  outlined: boolean;
  /**
   * When set the editor is in read only mode.
   * @attribute
   */
  readOnly: boolean;
  /**
   * When set all controls are disabled in the form
   * @attribute
   */
  disabled: boolean;
  /** 
   * When set it automatically encodes and decodes values
   * in application/x-www-form-urlencoded editor.
   * @attribute
   */
  autoEncode: boolean;
  /** 
   * The current request content type. It is passed to the `raw` editor
   * to detect current language.
   * @attribute
   */
  contentType: string;
  [contentTypeValue]: string;
  /** 
   * The list of coma separated names of the editors to enable.
   * This must be the list of `id` values from the available editors.
   * Possible values: `raw,urlEncode,multipart,file`.
   * 
   * @attribute
   */
  types?: string;
  [enabledEditorsValue]?: string;
  /**
   * The final list of editors to render.
   */
  get effectiveEditors(): Readonly<EditorType[]>;
  [effectiveEditorsValue]: Readonly<EditorType[]>;

  [previewDialogOpened]: boolean;
  [generatingPreview]: boolean;
  [previewValue]: string;
  [invalidMimeValue]: boolean;
  [invalidMimeMessage]: number;
  [mimeValue]: string;

  /**
   * @returns {boolean} True when the current value is a file (or blob).
   */
  readonly hasFile: boolean;

  /** 
   * When set it ignores the content type processing.
   * This disables option "current header value", in raw editor, and disabled information about 
   * content-type header update.
   * 
   * @attribute
   */
  ignoreContentType: boolean;

  constructor();

  /**
   * This must be called only when the `model` property change from the 
   * outside. It restores values depending on the selected editor.
   */
  [modelChanged](): void;

  /**
   * Restores file value from the model, if exists
   */
  [restoreFileModel](): void;

  /**
   * Dispatches the `input` event
   */
  [notifyInput](): void;

  /**
   * A handler for the editor selection. It activates an editor, if necessary.
   */
  [typeChangeHandler](e: CustomEvent): Promise<void>;

  /**
   * A handler for the file pick button click.
   * Activates the file input.
   */
  [pickFileHandler](): void;

  /**
   * A handler for the file file selection in the file input.
   * Sets the value to the file.
   */
  [fileChangeHandler](e: Event): Promise<void>;

  /**
   * Clears the current value
   */
  [clearValueHandler](): void;

  /**
   * Reads editor view model
   * @param editor The editor id
   * @returns The view model
   */
  [readMetaModel](editor: string): (ApiTypes.ApiType | RequestBody.MultipartBody | RequestBody.RawBody)[] | undefined;

  /**
   * Sets editor view model on the local model
   * @param editor The editor id
   * @param model The view model
   */
  [setMetaModel](editor: (ApiTypes.ApiType | RequestBody.MultipartBody | RequestBody.RawBody)[], model: (ApiTypes.ApiType | RequestBody.MultipartBody | RequestBody.RawBody)[]): void;

  /**
   * A handler for the change event dispatched by the 
   * `urlEncode` editor.
   * Updated the local value, model, and notifies the change.
   */
  [urlEncodeChangeHandler](e: Event): void;

  /**
   * A handler for the change event dispatched by the `raw` editor.
   * Updated the local value, model, and notifies the change.
   */
  [rawChangeHandler](e: Event): void;

  /**
   * A handler for the change event dispatched by the 
   * `multipart` editor.
   * Updated the local value, model, and notifies the change.
   */
  [multipartChangeHandler](e: Event): void;

  /**
   * Toggles the multipart body preview 
   * @todo This should also support x-www-formdata 
   */
  [togglePreviewHandler](): void;

  /**
   * Generates a preview for multipart data.
   * @todo This should also support x-www-formdata 
   */
  [generatePreview](): Promise<void>;

  /**
   * Handler for the preview dialog close event.
   * Cleans up the preview data.
   */
  [previewClosedHandler](): void;

  /**
   * Checks whether the current content type header value matches the selected editor.
   * If not it renders a warning message.
   */
  [analyzeContentType](): void;

  /**
   * Automatically fixes content type problem.
   */
  [autoFixMime](): void;

  /**
   * A handler for the mime type selection.
   */
  [mimeTypeChangeHandler](e: CustomEvent): void;

  /**
   * 
   * @param {DragEvent} e 
   */
  [dropHandler](e: DragEvent): Promise<void>;

  /**
   * @param {DragEvent} e 
   */
  [dragOverHandler](e: DragEvent): void;

  /**
   * Handles the change to the `enabledEditors` property and, when set, computes a list of
   * editors to enable in the view. The resulted list of a sublist of the `editorTypes` list.
   */
  [computeEffectiveEditors](list?: string): Readonly<EditorType[]> | undefined;

  render(): TemplateResult;

  /**
   * @returns The template for the dropdown menu for the editor type
   */
  [bodyTypeSelectorTemplate](): TemplateResult;

  /**
   * @returns {TemplateResult|string} The template for the main editor actions.
   */
  [mainActionsTemplate](): TemplateResult | string;

  /**
   * Add editor specific actions to the top toolbar.
   * @returns
   */
  [editorActions](): TemplateResult | string;

  [bodyTypeOptionsTemplate](): TemplateResult;

  /**
   * @returns A template for currently rendered editor
   */
  [editorTemplate](): TemplateResult;

  /**
   * @returns The template for the raw editor
   */
  [rawEditorTemplate](): TemplateResult;

  /**
   * @param {string} value The editor value
   * @returns The template for the Monaco editor
   */
  [monacoTemplate](value: string): TemplateResult;

  /**
   * @returns A template for the application/x-www-form-urlencoded editor
   */
  [urlEncodeEditorTemplate](): TemplateResult;

  /**
   * @returns A template for the multipart editor
   */
  [multipartEditorTemplate](): TemplateResult;

  /**
   * @returns A template for the file input editor
   */
  [fileEditorTemplate](): TemplateResult;

  /**
   * @returns A template for the missing selection
   */
  [noEditorTemplate](): TemplateResult;

  /**
   * @returns A template for the file details.
   */
  [fileDetailTemplate](): TemplateResult | string;

  [previewTemplate](): TemplateResult;

  [invalidMimeTemplate](): TemplateResult;

  /**
   * @param suggested
   * @returns A template for fixable mime type mismatch message.
   */
  [fixableInvalidMimeTemplate](suggested: string): TemplateResult;
}
